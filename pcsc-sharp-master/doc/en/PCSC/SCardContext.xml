<Type Name="SCardContext" FullName="PCSC.SCardContext">
  <TypeSignature Language="C#" Value="public class SCardContext : IDisposable, PCSC.ISCardContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SCardContext extends System.Object implements class PCSC.ISCardContext, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>pcsc-sharp</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>PCSC.ISCardContext</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Manages an application context to the PC/SC Resource Manager.</summary>
    <remarks>Each thread of an application shall use its own SCardContext.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SCardContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public PCSC.SCardError Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError Cancel() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels all pending blocking requests on the <see cref="M:PCSC.SCardContext.GetStatusChange(System.IntPtr,PCSC.SCardReaderState[])" /> method.</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid context (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>Server is not running (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
          </list>
        </returns>
        <remarks>This method calls the API function SCardCancel().</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckValidity">
      <MemberSignature Language="C#" Value="public PCSC.SCardError CheckValidity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError CheckValidity() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Checks the validity of the current context.</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>The context is valid. (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>The context is invalid. (SCARD_E_INVALID_HANDLE)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>Call this function to determine whether a smart card context handle is still valid. After a smart card context handle has been set by <see cref="M:PCSC.SCardContext.Establish(PCSC.SCardScope)" />, it may become not valid if the resource manager service has been shut down.</para>
          <para>This method calls the API function SCardIsValidContext().</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes a PC/SC application context.</summary>
        <remarks>If a context to the PC/SC Resource Manager is established, Dispose() will call the <see cref="M:PCSC.SCardContext.Release" /> method silently.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Ignored. If an application context to the PC/SC Resource Manager has been established it will call the <see cref="M:PCSC.SCardContext.Release" /> method.</param>
        <summary>Disposes a PC/SC application context.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Establish">
      <MemberSignature Language="C#" Value="public void Establish (PCSC.SCardScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Establish(valuetype PCSC.SCardScope scope) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="PCSC.SCardScope" />
      </Parameters>
      <Docs>
        <param name="scope">Scope of the establishment. This can either be a local or remote connection.</param>
        <summary>Creates an Application Context to the PC/SC Resource Manager.</summary>
        <remarks>
          <para>Creates an Application Context for a client. This must be the first WinSCard function called in a PC/SC application. Each thread of an application shall use its own <see cref="T:PCSC.SCardContext" />.</para>
          <para>This method calls the API function SCardEstablishContext().</para>
          <example>
            <code lang="C#">
            var context = new SCardContext();
            context.Establish(SCardScope.System);
            </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SCardContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Destroys application context to the PC/SC Resource Manager.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReaderGroups">
      <MemberSignature Language="C#" Value="public string[] GetReaderGroups ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetReaderGroups() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a list of currently available reader groups on the system. </summary>
        <returns>An array of <see cref="T:System.String" />s containing all Smart Card reader groups found by the PC/SC Resource Manager.</returns>
        <remarks>
          <para>This method calls the API function SCardListReaderGroups().</para>
          <example>
            <code lang="C#">
            using (var context = new SCardContext()) {
            context.Establish(SCardScope.System);
            // list all configured reader groups
            Console.WriteLine("Currently configured readers groups: ");
            var groups = context.GetReaderGroups();
            foreach (string group in groups) {
            	    Console.WriteLine("\t" + group);
            }
            }
            </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReaders">
      <MemberSignature Language="C#" Value="public string[] GetReaders ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetReaders() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a list of currently available readers on the system.</summary>
        <returns>An array of <see cref="T:System.String" />s containing all Smart Card readers found by the PC/SC Resource Manager.</returns>
        <remarks>
          <para>This method calls the API function SCardListReaders().</para>
          <example>
            <code lang="C#">
            using (var context = new SCardContext()) {
            context.Establish(SCardScope.System);
            // list all (smart card) readers
            Console.WriteLine("Currently connected readers: ");
            var readers = context.GetReaders();
            foreach (string reader in readers) {
            	    Console.WriteLine("\t" + reader);
            }
            }
            </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReaders">
      <MemberSignature Language="C#" Value="public string[] GetReaders (string[] groups);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetReaders(string[] groups) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groups" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="groups">List of groups to list readers.</param>
        <summary>Returns a list of currently available readers on the system.</summary>
        <returns>An array of <see cref="T:System.String" />s containing all Smart Card readers found by the PC/SC Resource Manager.</returns>
        <remarks>
          <para>Groups are not used on Linux/UNIX machines using the PC/SC Lite daemon.</para>
          <para>This method calls the API function SCardListReaders().</para>
          <example>
            <code lang="C#">
            using (var context = new SCardContext()) {
            context.Establish(SCardScope.System);
            // list all configured reader groups
            Console.WriteLine("\nCurrently configured readers groups: ");
            var groups = context.GetReaderGroups();
            foreach (string group in groups) {
            	    Console.WriteLine("\t" + group);
            }
            // list readers for each group
            foreach (string group in groups) {
            	    Console.WriteLine("\nGroup " + group + " contains ");
            	    foreach (string reader in context.GetReaders(new string[] {group})) {
            		    Console.WriteLine("\t" + reader);
            }
            }
            }
            </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReaderStatus">
      <MemberSignature Language="C#" Value="public PCSC.SCardReaderState GetReaderStatus (string readerName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class PCSC.SCardReaderState GetReaderStatus(string readerName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardReaderState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="readerName">The requested reader.</param>
        <summary>Returns the current reader status.</summary>
        <returns>A <see cref="T:PCSC.SCardReaderState" /> that contains the current reader status.</returns>
        <remarks>
          <para>This method uses the <see cref="M:PCSC.SCardContext.GetStatusChange(System.IntPtr,PCSC.SCardReaderState[])" /> method with a timeout of zero.</para>
          <example>
            <code lang="C#">
            // Retrieve the names of all installed readers.
            using (var ctx = new SCardContext()) {
            ctx.Establish(SCardScope.System);
            var readerNames = ctx.GetReaders();
            // Get the current status of the first reader.
            var state = ctx.GetReaderStatus(readerNames[0]);
            Console.WriteLine("Reader: " + state.ReaderName);
            Console.WriteLine("CurrentState: " + state.CurrentState
            	    + " EventState: " + state.EventState + "\n"
            	    + "CurrentStateValue: " + state.CurrentStateValue
            	    + " EventStateValue: " + state.EventStateValue);
            Console.WriteLine("UserData: " + state.UserData.ToString()
            	    + " CardChangeEventCnt: " + state.CardChangeEventCnt);
            Console.WriteLine("ATR: " + BitConverter.ToString(state.Atr));
            }
            </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReaderStatus">
      <MemberSignature Language="C#" Value="public PCSC.SCardReaderState[] GetReaderStatus (string[] readerNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class PCSC.SCardReaderState[] GetReaderStatus(string[] readerNames) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardReaderState[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readerNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="readerNames">Requested reader names.</param>
        <summary>Returns the current reader status of all requested readers.</summary>
        <returns>An array of <see cref="T:PCSC.SCardReaderState" />s that contains the current reader status of each requested reader.</returns>
        <remarks>
          <para>This method uses the <see cref="M:PCSC.SCardContext.GetStatusChange(System.IntPtr,PCSC.SCardReaderState[])" /> method with a timeout of zero.</para>
          <example>
            <code lang="C#">
            // Retrieve the names of all installed readers.
            using (var ctx = new SCardContext()) {
            ctx.Establish(SCardScope.System);
            var readerNames = ctx.GetReaders();
            // Get the current status for all readers.
            var states = ctx.GetReaderStatus(readerNames);
            foreach (var state in states) {
            	    Console.WriteLine("------------------------------");
            	    Console.WriteLine("Reader: " + state.ReaderName);
            	    Console.WriteLine("CurrentState: " + state.CurrentState
            		    + " EventState: " + state.EventState + "\n"
            		    + "CurrentStateValue: " + state.CurrentStateValue
            		    + " EventStateValue: " + state.EventStateValue);
            	    Console.WriteLine("UserData: " + state.UserData.ToString()
            		    + " CardChangeEventCnt: " + state.CardChangeEventCnt);
            	    Console.WriteLine("ATR: " + StringAtr(state.ATR));
            }
            }
            </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatusChange">
      <MemberSignature Language="C#" Value="public PCSC.SCardError GetStatusChange (IntPtr timeout, PCSC.SCardReaderState[] readerStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError GetStatusChange(native int timeout, class PCSC.SCardReaderState[] readerStates) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.IntPtr" />
        <Parameter Name="readerStates" Type="PCSC.SCardReaderState[]" />
      </Parameters>
      <Docs>
        <param name="timeout">Maximum waiting time (in milliseconds) for status change, zero or <see cref="P:PCSC.SCardContext.INFINITE" /> for infinite.</param>
        <param name="readerStates">Structures of readers with current states.</param>
        <summary>Blocks execution until the current availability of the cards in a specific set of readers changes.</summary>
        <returns>
          <para>A <see cref="T:PCSC.SCardError" /> indicating an error or the success.The caller receives status changes through the <see cref="T:PCSC.SCardReaderState" /> array.</para>
          <list type="table">
            <listheader>
              <term>Return value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>Server is not running (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>
                <paramref name="readerStates" /> is invalid or <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidValue" />
              </term>
              <description>Invalid States, reader name, etc (SCARD_E_INVALID_VALUE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid context (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader is unavailable (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Timeout" />
              </term>
              <description>The user-specified timeout value has expired (SCARD_E_TIMEOUT)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>This method receives a structure or list of structures containing reader names. It then blocks for a change in state to occur for a maximum blocking time of <paramref name="timeout" /> or forever if <see cref="P:PCSC.SCardContext.INFINITE" /> is used.</para>
          <para>The new event state will be contained in <see cref="P:PCSC.SCardReaderState.EventState" />. A status change might be a card insertion or removal event, a change in ATR, etc.</para>
          <para>To wait for a reader event (reader added or removed) you may use the special reader name "\\?PnP?\Notification". If a reader event occurs the state of this reader will change and the bit <see cref="F:PCSC.SCRState.Changed" /> will be set.</para>
          <para>This method calls the API function SCardGetStatusChange().</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A pointer (Application Context) that can be used for C API calls.</summary>
        <value>The returned Application Context handle. Is <see cref="F:System.IntPtr.Zero" /> if not context has been established.</value>
        <remarks>This is the Application Context handle that is returned when calling the C API function SCardEstablishContext().</remarks>
      </Docs>
    </Member>
    <Member MemberName="Infinite">
      <MemberSignature Language="C#" Value="public IntPtr Infinite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Infinite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Infinite timeout.</summary>
        <value>0xFFFFFFFF</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="INFINITE">
      <MemberSignature Language="C#" Value="public static IntPtr INFINITE { get; }" />
      <MemberSignature Language="ILAsm" Value=".property native int INFINITE" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Infinite timeout.</summary>
        <value>0xFFFFFFFF</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValid() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Checks the validity of the current context.</summary>
        <returns>
          <see langword="true" /> if the context is valid.</returns>
        <remarks>Call this function to determine whether a smart card context handle is still valid. After a smart card context handle has been set by <see cref="M:PCSC.SCardContext.Establish(PCSC.SCardScope)" />, it may become not valid if the resource manager service has been shut down.
            <example><code lang="C#">
            using (var context = new SCardContext()) {
            context.Establish(SCardScope.System);
            Console.WriteLine("Context is valid? {0}", context.IsValid());
            }
            </code></example></remarks>
      </Docs>
    </Member>
    <Member MemberName="MAX_ATR_SIZE">
      <MemberSignature Language="C#" Value="public static int MAX_ATR_SIZE { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MAX_ATR_SIZE" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Maximum ATR size.</summary>
        <value>
          <list type="table">
            <listheader>
              <term>Platform</term>
              <description>Maximum ATR size</description>
            </listheader>
            <item>
              <term>Windows (Winscard.dll)</term>
              <description>36</description>
            </item>
            <item>
              <term>UNIX/Linux (PC/SClite)</term>
              <description>33</description>
            </item>
          </list>
        </value>
        <remarks>Attention: Size depends on platform.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxAtrSize">
      <MemberSignature Language="C#" Value="public int MaxAtrSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAtrSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Maximum ATR size.</summary>
        <value>
          <list type="table">
            <listheader>
              <term>Platform</term>
              <description>Maximum ATR size</description>
            </listheader>
            <item>
              <term>Windows (Winscard.dll)</term>
              <description>36</description>
            </item>
            <item>
              <term>UNIX/Linux (PC/SClite)</term>
              <description>33</description>
            </item>
          </list>
        </value>
        <remarks>Attention: Size depends on platform.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReEstablish">
      <MemberSignature Language="C#" Value="public void ReEstablish ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReEstablish() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Re-Establishes an Application Context to the PC/SC Resource Manager with the last used <see cref="T:PCSC.SCardScope" />.</summary>
        <remarks>This method must not be called before <see cref="M:PCSC.SCardContext.Establish(PCSC.SCardScope)" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Destroys a communication context to the PC/SC Resource Manager and frees unmanaged resources.</summary>
        <remarks>
          <para>This must be the last method called in a PC/SC application. <see cref="M:PCSC.SCardContext.Dispose" /> calls this method silently.</para>
          <para>This method calls the API function SCardReleaseContext().</para>
          <example>
            <code lang="C#">
            var context = new SCardContext();
            // establish context
            context.Establish(SCardScope.System);
            // release context
            context.Release();
            </code>
          </example>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
