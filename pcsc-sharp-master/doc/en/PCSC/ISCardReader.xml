<Type Name="ISCardReader" FullName="PCSC.ISCardReader">
  <TypeSignature Language="C#" Value="public interface ISCardReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISCardReader implements class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>pcsc-sharp</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Common functions that are needed to operate on Smart Card readers.</summary>
    <remarks>See <see cref="T:PCSC.SCardReader" />.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ActiveProtocol">
      <MemberSignature Language="C#" Value="public PCSC.SCardProtocol ActiveProtocol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype PCSC.SCardProtocol ActiveProtocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardProtocol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The currently used protocol to communicate with the card.</summary>
        <value>
          <see cref="F:PCSC.SCardProtocol.Unset" /> if not connected.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public PCSC.SCardError BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError BeginTransaction() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Establishes a temporary exclusive access mode for doing a serie of commands in a transaction.</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.SharingViolation" />
              </term>
              <description>Someone else has exclusive rights (SCARD_E_SHARING_VIOLATION)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>You might want to use this when you are selecting a few files and then writing a large file so you can make sure that another application will not change the current file. If another application has a lock on this reader or this application is in
            <see cref="F:PCSC.SCardShareMode.Exclusive" /> there will be no action taken.</para>
          <para>This method calls the API function SCardBeginTransaction().</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CardHandle">
      <MemberSignature Language="C#" Value="public IntPtr CardHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int CardHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A pointer (Card Handle) that can be used for C API calls.</summary>
        <value>0 if not connected.</value>
        <remarks>
          <para>This is the card handle that is returned when calling the C API function SCardConnect().</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public PCSC.SCardError Connect (string readerName, PCSC.SCardShareMode mode, PCSC.SCardProtocol preferredProtocol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError Connect(string readerName, valuetype PCSC.SCardShareMode mode, valuetype PCSC.SCardProtocol preferredProtocol) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readerName" Type="System.String" />
        <Parameter Name="mode" Type="PCSC.SCardShareMode" />
        <Parameter Name="preferredProtocol" Type="PCSC.SCardProtocol" />
      </Parameters>
      <Docs>
        <param name="readerName">Reader name to connect to.</param>
        <param name="mode">Mode of connection type: exclusive or shared.
            <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardShareMode.Shared" /></term><description>This application will allow others to share the reader. (SCARD_SHARE_SHARED)</description></item><item><term><see cref="F:PCSC.SCardShareMode.Exclusive" /></term><description>This application will NOT allow others to share the reader. (SCARD_SHARE_EXCLUSIVE)</description></item></list></param>
        <param name="preferredProtocol">Desired protocol use.</param>
        <summary>Establishes a connection to the Smart Card reader.</summary>
        <returns>An error code / return value:
            <para><list type="table"><listheader><term>Error code</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardError.Success" /></term><description>Successful (SCARD_S_SUCCESS)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidHandle" /></term><description>Invalid context handle (SCARD_E_INVALID_HANDLE)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidParameter" /></term><description><paramref name="preferredProtocol" /> is invalid or <see langword="null" />  (SCARD_E_INVALID_PARAMETER)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidValue" /></term><description>Invalid sharing mode, requested protocol, or reader name (SCARD_E_INVALID_VALUE)</description></item><item><term><see cref="F:PCSC.SCardError.NoService" /></term><description>The server is not runing (SCARD_E_NO_SERVICE)</description></item><item><term><see cref="F:PCSC.SCardError.NoSmartcard" /></term><description>No smart card present (SCARD_E_NO_SMARTCARD)</description></item><item><term><see cref="F:PCSC.SCardError.NotReady" /></term><description>Could not allocate the desired port (SCARD_E_NOT_READY)</description></item><item><term><see cref="F:PCSC.SCardError.ProtocolMismatch" /></term><description>Requested protocol is unknown (SCARD_E_PROTO_MISMATCH)</description></item><item><term><see cref="F:PCSC.SCardError.ReaderUnavailable" /></term><description>Could not power up the reader or card (SCARD_E_READER_UNAVAILABLE)</description></item><item><term><see cref="F:PCSC.SCardError.SharingViolation" /></term><description>Someone else has exclusive rights (SCARD_E_SHARING_VIOLATION)</description></item><item><term><see cref="F:PCSC.SCardError.UnknownReader" /></term><description>The reader name is <see langword="null" /> (SCARD_E_UNKNOWN_READER)</description></item><item><term><see cref="F:PCSC.SCardError.UnsupportedFeature" /></term><description>Protocol not supported (SCARD_E_UNSUPPORTED_FEATURE)</description></item><item><term><see cref="F:PCSC.SCardError.CommunicationError" /></term><description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description></item><item><term><see cref="F:PCSC.SCardError.InternalError" /></term><description>An internal consistency check failed (SCARD_F_INTERNAL_ERROR)</description></item><item><term><see cref="F:PCSC.SCardError.UnpoweredCard" /></term><description>Card is not powered (SCARD_W_UNPOWERED_CARD)</description></item><item><term><see cref="F:PCSC.SCardError.UnresponsiveCard" /></term><description>Card is mute (SCARD_W_UNRESPONSIVE_CARD)</description></item></list></para></returns>
        <remarks>
          <para>
            <paramref name="preferredProtocol" />  is a bit mask of acceptable protocols for the connection. You can use (<see cref="F:PCSC.SCardProtocol.T0" /> | <see cref="F:PCSC.SCardProtocol.T1" />) if you do not have a preferred protocol. The protocol used with this connection will be stored in <see cref="P:PCSC.ISCardReader.ActiveProtocol" />.</para>
          <para>This method calls the API function SCardConnect().</para>
          <example>
            <code lang="C#">
            // Establish PC/SC context.
            SCardContext ctx = new SCardContext();
            ctx.Establish(SCardScope.System);
            // Create a Smart Card reader object and connect to it.
            ISCardReader reader = new SCardReader(ctx);
            SCardError serr = reader.Connect("OMNIKEY CardMan 5x21 00 00",
            	SCardShareMode.Shared,
            	SCardProtocol.Any);
            </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public PCSC.SCardError Control (IntPtr controlCode, byte[] sendBuffer, ref byte[] receiveBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError Control(native int controlCode, unsigned int8[] sendBuffer, unsigned int8[] receiveBuffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlCode" Type="System.IntPtr" />
        <Parameter Name="sendBuffer" Type="System.Byte[]" />
        <Parameter Name="receiveBuffer" Type="System.Byte[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="controlCode">Control code for the operation.</param>
        <param name="sendBuffer">Command to send to the reader.</param>
        <param name="receiveBuffer">Response from the reader.</param>
        <summary>Sends a command directly to the IFD Handler (reader driver) to be processed by the reader.</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return code</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>
                <paramref name="sendBuffer" /> or <paramref name="receiveBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>
                <paramref name="sendBuffer" /> is <see langword="null" /> and the IFDHandler is version 2.0 (without
            <paramref name="controlCode" />
            ) (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidValue" />
              </term>
              <description>Invalid value was presented (SCARD_E_INVALID_VALUE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NotTransacted" />
              </term>
              <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed(SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.UnsupportedFeature" />
              </term>
              <description>Driver does not support (SCARD_E_UNSUPPORTED_FEATURE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.RemovedCard" />
              </term>
              <description>The card has been removed from the reader(SCARD_W_REMOVED_CARD)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ResetCard" />
              </term>
              <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>This method is useful for creating client side reader drivers for functions like PIN pads, biometrics, or other extensions to the normal smart card reader that are not normally handled by PC/SC.</para>
          <para>This method calls the API function SCardControl().</para>
          <block subset="none" type="note">
            <para>The API of this function changed. In pcsc-lite 1.2.0 and before the API was not Windows(R) PC/SC compatible. This has been corrected.</para>
          </block>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentContext">
      <MemberSignature Language="C#" Value="public PCSC.ISCardContext CurrentContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class PCSC.ISCardContext CurrentContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.ISCardContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The Smart Card context that will be used for this connection.</summary>
        <value>
          <see langword="null" /> if the reader is not connected.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentShareMode">
      <MemberSignature Language="C#" Value="public PCSC.SCardShareMode CurrentShareMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype PCSC.SCardShareMode CurrentShareMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardShareMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current mode of connection type: exclusive or shared.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Disconnect">
      <MemberSignature Language="C#" Value="public PCSC.SCardError Disconnect (PCSC.SCardReaderDisposition disconnectExecution);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError Disconnect(valuetype PCSC.SCardReaderDisposition disconnectExecution) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disconnectExecution" Type="PCSC.SCardReaderDisposition" />
      </Parameters>
      <Docs>
        <param name="disconnectExecution">Reader function to execute.</param>
        <summary>Terminates a connection made through <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />.</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidValue" />
              </term>
              <description>Invalid <paramref name="disconnectExecution" /> (SCARD_E_INVALID_VALUE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoSmartcard" />
              </term>
              <description>No smart card present (SCARD_E_NO_SMARTCARD)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>This method calls the API function SCardDisconnect().</para>
          <example>
            <code lang="C#">
            // Establish PC/SC context.
            SCardContext ctx = new SCardContext();
            ctx.Establish(SCardScope.System);
            // Create a Smart Card reader object and connect to it.
            ISCardReader reader = new SCardReader(ctx);
            SCardError serr = reader.Connect("OMNIKEY", SCardShareMode.Shared, SCardProtocol.Any);
            // Disconnect the reader and reset the SmartCard.
            reader.Disconnect(SCardReaderDisposition.Reset);
            </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTransaction">
      <MemberSignature Language="C#" Value="public PCSC.SCardError EndTransaction (PCSC.SCardReaderDisposition disposition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError EndTransaction(valuetype PCSC.SCardReaderDisposition disposition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposition" Type="PCSC.SCardReaderDisposition" />
      </Parameters>
      <Docs>
        <param name="disposition">Action to be taken on the reader.</param>
        <summary>Ends a previously begun transaction.</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidValue" />
              </term>
              <description>Invalid value for <paramref name="disposition" /> (SCARD_E_INVALID_VALUE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.SharingViolation" />
              </term>
              <description>Someone else has exclusive rights (SCARD_E_SHARING_VIOLATION)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>The calling application must be the owner of the previously begun transaction or an error will occur.</para>
          <para>This method calls the API function SCardEndTransaction().</para>
          <block subset="none" type="note">
            <para>The disposition action is not currently used in PC/SC Lite on UNIX/Linux machines.</para>
          </block>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttrib">
      <MemberSignature Language="C#" Value="public PCSC.SCardError GetAttrib (PCSC.SCardAttribute attributeId, out byte[] attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError GetAttrib(valuetype PCSC.SCardAttribute attributeId, unsigned int8[] attribute) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeId" Type="PCSC.SCardAttribute" />
        <Parameter Name="attribute" Type="System.Byte[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="attributeId">Identifier for the attribute to get.</param>
        <param name="attribute">A buffer that receives the attribute.</param>
        <summary>Gets an attribute from the IFD Handler (reader driver).</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return code</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>
                <paramref name="attribute" /> is too big  - indicates an error in the PC/SC class library. (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>Reader buffer <paramref name="attribute" /> not large enough  - indicates an error in the PC/SC class library. (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoMemory" />
              </term>
              <description>Memory allocation failed (SCARD_E_NO_MEMORY)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NotTransacted" />
              </term>
              <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
          </list>
        </returns>
        <remarks>This method calls the API function SCardGetAttrib().</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttrib">
      <MemberSignature Language="C#" Value="public PCSC.SCardError GetAttrib (IntPtr attributeId, out byte[] attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError GetAttrib(native int attributeId, unsigned int8[] attribute) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeId" Type="System.IntPtr" />
        <Parameter Name="attribute" Type="System.Byte[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="attributeId">Identifier for the attribute to get.</param>
        <param name="attribute">A buffer that receives the attribute.</param>
        <summary>Gets an attribute from the IFD Handler (reader driver).</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return code</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>
                <paramref name="attribute" /> is too big  - indicates an error in the PC/SC class library. (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>Reader buffer <paramref name="attribute" /> not large enough  - indicates an error in the PC/SC class library. (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoMemory" />
              </term>
              <description>Memory allocation failed (SCARD_E_NO_MEMORY)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NotTransacted" />
              </term>
              <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
          </list>
        </returns>
        <remarks>This method calls the API function SCardGetAttrib().</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttrib">
      <MemberSignature Language="C#" Value="public PCSC.SCardError GetAttrib (PCSC.SCardAttribute attributeId, byte[] attribute, out int attributeBufferLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError GetAttrib(valuetype PCSC.SCardAttribute attributeId, unsigned int8[] attribute, int32 attributeBufferLength) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeId" Type="PCSC.SCardAttribute" />
        <Parameter Name="attribute" Type="System.Byte[]" />
        <Parameter Name="attributeBufferLength" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="attributeId">Identifier for the attribute to get.</param>
        <param name="attribute">A buffer that receives the attribute.</param>
        <param name="attributeBufferLength">Size of the result contained in attribute (in bytes).</param>
        <summary>Gets an attribute from the IFD Handler (reader driver).</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return code</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>
                <paramref name="attribute" /> is too big  - indicates an error in the PC/SC class library. (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>Reader buffer <paramref name="attribute" /> not large enough  - indicates an error in the PC/SC class library. (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoMemory" />
              </term>
              <description>Memory allocation failed (SCARD_E_NO_MEMORY)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NotTransacted" />
              </term>
              <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
          </list>
          <para>The method will return <see cref="F:PCSC.SCardError.InsufficientBuffer" /> if <paramref name="attribute" /> is
            <see langword="null" /> or if the buffer size is not sufficient.
            <paramref name="attributeBufferLength" /> contains the required amount of bytes (size).</para>
          <para>If the method returned with <see cref="F:PCSC.SCardError.Success" /> then <paramref name="attributeBufferLength" /> contains the exact size of the result in
            <paramref name="attribute" />
            .</para>
          <para>For an example please see <see cref="M:PCSC.ISCardReader.GetAttrib(PCSC.SCardAttribute,System.Byte[]@)" />.</para>
        </returns>
        <remarks>This method calls the API function SCardGetAttrib().</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttrib">
      <MemberSignature Language="C#" Value="public PCSC.SCardError GetAttrib (IntPtr attributeId, byte[] attribute, out int attributeBufferLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError GetAttrib(native int attributeId, unsigned int8[] attribute, int32 attributeBufferLength) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeId" Type="System.IntPtr" />
        <Parameter Name="attribute" Type="System.Byte[]" />
        <Parameter Name="attributeBufferLength" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="attributeId">Identifier for the attribute to get.</param>
        <param name="attribute">A buffer that receives the attribute.</param>
        <param name="attributeBufferLength">Size of the result contained in attribute (in bytes).</param>
        <summary>Gets an attribute from the IFD Handler (reader driver).</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return code</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>
                <paramref name="attribute" /> is too big  - indicates an error in the PC/SC class library. (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>Reader buffer <paramref name="attribute" /> not large enough  - indicates an error in the PC/SC class library. (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoMemory" />
              </term>
              <description>Memory allocation failed (SCARD_E_NO_MEMORY)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NotTransacted" />
              </term>
              <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
          </list>
          <para>The method will return <see cref="F:PCSC.SCardError.InsufficientBuffer" /> if <paramref name="attribute" /> is
            <see langword="null" /> or if the buffer size is not sufficient.
            <paramref name="attributeBufferLength" /> contains the required amount of bytes (size).</para>
          <para>If the method returned with <see cref="F:PCSC.SCardError.Success" /> then <paramref name="attributeBufferLength" /> contains the exact size of the result in
            <paramref name="attribute" />
            .</para>
          <para>For an example please see <see cref="M:PCSC.ISCardReader.GetAttrib(PCSC.SCardAttribute,System.Byte[]@)" />.</para>
        </returns>
        <remarks>This method calls the API function SCardGetAttrib().</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConnected">
      <MemberSignature Language="C#" Value="public bool IsConnected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConnected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current connection state of the reader.</summary>
        <value>
          <see langword="true" /> if the reader is connected. Otherwise <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderName">
      <MemberSignature Language="C#" Value="public string ReaderName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ReaderName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The connected reader's friendly name.</summary>
        <value>A human readable string of the reader name or <see langword="null" /> if the reader object is currently not connected.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reconnect">
      <MemberSignature Language="C#" Value="public PCSC.SCardError Reconnect (PCSC.SCardShareMode mode, PCSC.SCardProtocol preferredProtocol, PCSC.SCardReaderDisposition initialExecution);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError Reconnect(valuetype PCSC.SCardShareMode mode, valuetype PCSC.SCardProtocol preferredProtocol, valuetype PCSC.SCardReaderDisposition initialExecution) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="PCSC.SCardShareMode" />
        <Parameter Name="preferredProtocol" Type="PCSC.SCardProtocol" />
        <Parameter Name="initialExecution" Type="PCSC.SCardReaderDisposition" />
      </Parameters>
      <Docs>
        <param name="mode">Mode of connection type: exclusive/shared.
            <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardShareMode.Shared" /></term><description>This application will allow others to share the reader. (SCARD_SHARE_SHARED)</description></item><item><term><see cref="F:PCSC.SCardShareMode.Exclusive" /></term><description>This application will NOT allow others to share the reader. (SCARD_SHARE_EXCLUSIVE)</description></item></list></param>
        <param name="preferredProtocol">Desired protocol use.</param>
        <param name="initialExecution">Desired action taken on the card/reader before reconnect.</param>
        <summary>Reestablishes a connection to a reader that was previously connected to using
            <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />
            .</summary>
        <returns>An error code / return value:
            <list type="table"><listheader><term>Error code</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardError.Success" /></term><description>Successful (SCARD_S_SUCCESS)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidHandle" /></term><description>Invalid context handle (SCARD_E_INVALID_HANDLE)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidParameter" /></term><description><paramref name="preferredProtocol" /> is invalid or <see langword="null" />  (SCARD_E_INVALID_PARAMETER)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidValue" /></term><description>Invalid sharing mode, requested protocol, or reader name (SCARD_E_INVALID_VALUE)</description></item><item><term><see cref="F:PCSC.SCardError.NoService" /></term><description>The server is not runing (SCARD_E_NO_SERVICE)</description></item><item><term><see cref="F:PCSC.SCardError.NoSmartcard" /></term><description>No smart card present (SCARD_E_NO_SMARTCARD)</description></item><item><term><see cref="F:PCSC.SCardError.NotReady" /></term><description>Could not allocate the desired port (SCARD_E_NOT_READY)</description></item><item><term><see cref="F:PCSC.SCardError.ProtocolMismatch" /></term><description>Requested protocol is unknown (SCARD_E_PROTO_MISMATCH)</description></item><item><term><see cref="F:PCSC.SCardError.ReaderUnavailable" /></term><description>Could not power up the reader or card (SCARD_E_READER_UNAVAILABLE)</description></item><item><term><see cref="F:PCSC.SCardError.SharingViolation" /></term><description>Someone else has exclusive rights (SCARD_E_SHARING_VIOLATION)</description></item><item><term><see cref="F:PCSC.SCardError.UnsupportedFeature" /></term><description>Protocol not supported (SCARD_E_UNSUPPORTED_FEATURE)</description></item><item><term><see cref="F:PCSC.SCardError.CommunicationError" /></term><description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description></item><item><term><see cref="F:PCSC.SCardError.InternalError" /></term><description>An internal consistency check failed (SCARD_F_INTERNAL_ERROR)</description></item><item><term><see cref="F:PCSC.SCardError.RemovedCard" /></term><description>The smart card has been removed (SCARD_W_REMOVED_CARD)</description></item><item><term><see cref="F:PCSC.SCardError.UnresponsiveCard" /></term><description>Card is mute (SCARD_W_UNRESPONSIVE_CARD)</description></item></list></returns>
        <remarks>
          <para>
            <paramref name="preferredProtocol" />  is a bit mask of acceptable protocols for the connection. You can use (<see cref="F:PCSC.SCardProtocol.T0" /> | <see cref="F:PCSC.SCardProtocol.T1" />) if you do not have a preferred protocol. The protocol used with this connection will be stored in <see cref="P:PCSC.ISCardReader.ActiveProtocol" />.</para>
          <para>This method calls the API function SCardReconnect().</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttrib">
      <MemberSignature Language="C#" Value="public PCSC.SCardError SetAttrib (PCSC.SCardAttribute attributeId, byte[] attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError SetAttrib(valuetype PCSC.SCardAttribute attributeId, unsigned int8[] attribute) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeId" Type="PCSC.SCardAttribute" />
        <Parameter Name="attribute" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="attributeId">Identifier for the attribute to set.</param>
        <param name="attribute">Buffer that contains the new value of the attribute.</param>
        <summary>Set an attribute of the IFD Handler.</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>attribute is too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NotTransacted" />
              </term>
              <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>The list of attributes you can set depends on the IFD handler you are using.</para>
          <para>This method calls the API function SCardSetAttrib().</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttrib">
      <MemberSignature Language="C#" Value="public PCSC.SCardError SetAttrib (IntPtr attributeId, byte[] attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError SetAttrib(native int attributeId, unsigned int8[] attribute) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeId" Type="System.IntPtr" />
        <Parameter Name="attribute" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="attributeId">Identifier for the attribute to set.</param>
        <param name="attribute">Buffer that contains the new value of the attribute.</param>
        <summary>Set an attribute of the IFD Handler.</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Column</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>attribute is too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NotTransacted" />
              </term>
              <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>The list of attributes you can set depends on the IFD handler you are using.</para>
          <para>This method calls the API function SCardSetAttrib().</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttrib">
      <MemberSignature Language="C#" Value="public PCSC.SCardError SetAttrib (PCSC.SCardAttribute attributeId, byte[] attribute, int attributeBufferLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError SetAttrib(valuetype PCSC.SCardAttribute attributeId, unsigned int8[] attribute, int32 attributeBufferLength) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeId" Type="PCSC.SCardAttribute" />
        <Parameter Name="attribute" Type="System.Byte[]" />
        <Parameter Name="attributeBufferLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="attributeId">Identifier for the attribute to set.</param>
        <param name="attribute">Buffer that contains the new value of the attribute.</param>
        <param name="attributeBufferLength">Length of the <paramref name="attribute" /> buffer in bytes.</param>
        <summary>Set an attribute of the IFD Handler.</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Column</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>attribute is too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NotTransacted" />
              </term>
              <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>The list of attributes you can set depends on the IFD handler you are using.</para>
          <para>This method calls the API function SCardSetAttrib().</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttrib">
      <MemberSignature Language="C#" Value="public PCSC.SCardError SetAttrib (IntPtr attributeId, byte[] attribute, int attributeBufferLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError SetAttrib(native int attributeId, unsigned int8[] attribute, int32 attributeBufferLength) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeId" Type="System.IntPtr" />
        <Parameter Name="attribute" Type="System.Byte[]" />
        <Parameter Name="attributeBufferLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="attributeId">Identifier for the attribute to set.</param>
        <param name="attribute">Buffer that contains the new value of the attribute.</param>
        <param name="attributeBufferLength">Length of the <paramref name="attribute" /> buffer in bytes.</param>
        <summary>Set an attribute of the IFD Handler.</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Column</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>attribute is too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NotTransacted" />
              </term>
              <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>The list of attributes you can set depends on the IFD handler you are using.</para>
          <para>This method calls the API function SCardSetAttrib().</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public PCSC.SCardError Status (out string[] readerName, out PCSC.SCardState state, out PCSC.SCardProtocol protocol, out byte[] atr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError Status(string[] readerName, valuetype PCSC.SCardState state, valuetype PCSC.SCardProtocol protocol, unsigned int8[] atr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readerName" Type="System.String[]&amp;" RefType="out" />
        <Parameter Name="state" Type="PCSC.SCardState&amp;" RefType="out" />
        <Parameter Name="protocol" Type="PCSC.SCardProtocol&amp;" RefType="out" />
        <Parameter Name="atr" Type="System.Byte[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="readerName">The connected readers's friendly name.</param>
        <param name="state">The current state.</param>
        <param name="protocol">The card's currently used protocol.</param>
        <param name="atr">The card's ATR.</param>
        <summary>Returns the current status of the reader and the connected card.</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>The reader object did not allocate enough memory for <paramref name="readerName" /> or for <paramref name="atr" /> (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>The reader object got invalid. Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>The reader object passed a size of null for <paramref name="readerName" /> or <paramref name="atr" />  (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoMemory" />
              </term>
              <description>Memory allocation failed (SCARD_E_NO_MEMORY)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description> The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InternalError" />
              </term>
              <description>An internal consistency check failed (SCARD_F_INTERNAL_ERROR)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.RemovedCard" />
              </term>
              <description>The smart card has been removed (SCARD_W_REMOVED_CARD)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ResetCard" />
              </term>
              <description>The smart card has been reset (SCARD_W_RESET_CARD)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>The connected readers's friendly name will be stored in <paramref name="readerName" />. The card's ATR will be stored in <paramref name="atr" />. The current state, and protocol will be stored in <paramref name="state" /> and <paramref name="protocol" /> respectively.</para>
          <para>This method calls the API function SCardStatus().</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transmit">
      <MemberSignature Language="C#" Value="public PCSC.SCardError Transmit (byte[] sendBuffer, ref byte[] receiveBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError Transmit(unsigned int8[] sendBuffer, unsigned int8[] receiveBuffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sendBuffer" Type="System.Byte[]" />
        <Parameter Name="receiveBuffer" Type="System.Byte[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="sendBuffer">APDU to send to the card.</param>
        <param name="receiveBuffer">Response from the card.</param>
        <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />.</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description>Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>
                <paramref name="sendBuffer" /> or <paramref name="receiveBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>
                <paramref name="sendBuffer" /> or <paramref name="receiveBuffer" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidValue" />
              </term>
              <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NotTransacted" />
              </term>
              <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ProtocolMismatch" />
              </term>
              <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ResetCard" />
              </term>
              <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.RemovedCard" />
              </term>
              <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>The card responds from the APDU and stores this response in <paramref name="receiveBuffer" />. The buffer <paramref name="receiveBuffer" /> must be initialized and will be resized, if the buffer was too big.</para>
          <para>This method calls the API function SCardTransmit().</para>
          <block subset="none" type="note">
            <para>This method will only work if the reader has been connected with one of the following protocols:
            <list type="table"><listheader><term>Protocol</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardProtocol.T0" /></term><description>T=0 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.T1" /></term><description>T=1 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.Raw" /></term><description>Raw active protocol.</description></item></list></para>
          </block>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transmit">
      <MemberSignature Language="C#" Value="public PCSC.SCardError Transmit (byte[] sendBuffer, byte[] receiveBuffer, ref int receiveBufferLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError Transmit(unsigned int8[] sendBuffer, unsigned int8[] receiveBuffer, int32 receiveBufferLength) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sendBuffer" Type="System.Byte[]" />
        <Parameter Name="receiveBuffer" Type="System.Byte[]" />
        <Parameter Name="receiveBufferLength" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="sendBuffer">APDU to send to the card. </param>
        <param name="receiveBuffer">Response from the card.</param>
        <param name="receiveBufferLength">The buffer size of <paramref name="receiveBuffer" /> in bytes.</param>
        <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />.</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description> 	Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>
                <paramref name="sendBuffer" /> or <paramref name="receiveBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>
                <paramref name="sendBuffer" /> or <paramref name="receiveBuffer" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidValue" />
              </term>
              <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NotTransacted" />
              </term>
              <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ProtocolMismatch" />
              </term>
              <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ResetCard" />
              </term>
              <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.RemovedCard" />
              </term>
              <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>The card responds from the APDU and stores this response in <paramref name="receiveBuffer" />.  The buffer <paramref name="receiveBuffer" /> must be initialized. The size of the returned data will be stored in <paramref name="receiveBufferLength" />. This method will return with error code <see cref="F:PCSC.SCardError.InsufficientBuffer" /> if the buffer size of <paramref name="receiveBuffer" /> is too small for the result. If the parameter <paramref name="receiveBufferLength" /> is invalid, the method will throw an <see cref="T:System.ArgumentOutOfRangeException" />.</para>
          <para>This method calls the API function SCardTransmit().</para>
          <block subset="none" type="note">
            <para>This method will only work if the reader has been connected with one of the following protocols:
            <list type="table"><listheader><term>Protocol</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardProtocol.T0" /></term><description>T=0 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.T1" /></term><description>T=1 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.Raw" /></term><description>Raw active protocol.</description></item></list></para>
          </block>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transmit">
      <MemberSignature Language="C#" Value="public PCSC.SCardError Transmit (IntPtr sendPci, byte[] sendBuffer, ref byte[] receiveBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError Transmit(native int sendPci, unsigned int8[] sendBuffer, unsigned int8[] receiveBuffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sendPci" Type="System.IntPtr" />
        <Parameter Name="sendBuffer" Type="System.Byte[]" />
        <Parameter Name="receiveBuffer" Type="System.Byte[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="sendPci">A pointer to a pre-defined Structure of Protocol Control Information. You can use one of the following:
            <list type="table"><listheader><term>Protocol Control Information</term><description>Description</description></listheader><item><term><see cref="P:PCSC.SCardPCI.T0" /></term><description>Pre-defined T=0 PCI structure. (SCARD_PCI_T0)</description></item><item><term><see cref="P:PCSC.SCardPCI.T1" /></term><description>Pre-defined T=1 PCI structure. (SCARD_PCI_T1)</description></item><item><term><see cref="P:PCSC.SCardPCI.Raw" /></term><description>Pre-defined RAW PCI structure. (SCARD_PCI_RAW)</description></item></list></param>
        <param name="sendBuffer">APDU to send to the card. </param>
        <param name="receiveBuffer">Response from the card.</param>
        <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description> 	Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>
                <paramref name="sendBuffer" /> or <paramref name="receiveBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>
                <paramref name="sendBuffer" /> or <paramref name="receiveBuffer" /> or <paramref name="sendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidValue" />
              </term>
              <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NotTransacted" />
              </term>
              <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ProtocolMismatch" />
              </term>
              <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ResetCard" />
              </term>
              <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.RemovedCard" />
              </term>
              <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>The card responds from the APDU and stores this response in <paramref name="receiveBuffer" />.</para>
          <para>This method calls the API function SCardTransmit(). The pointers to the pre-defined / built-in PCI structures are determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transmit">
      <MemberSignature Language="C#" Value="public PCSC.SCardError Transmit (PCSC.SCardPCI sendPci, byte[] sendBuffer, PCSC.SCardPCI receivePci, ref byte[] receiveBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError Transmit(class PCSC.SCardPCI sendPci, unsigned int8[] sendBuffer, class PCSC.SCardPCI receivePci, unsigned int8[] receiveBuffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sendPci" Type="PCSC.SCardPCI" />
        <Parameter Name="sendBuffer" Type="System.Byte[]" />
        <Parameter Name="receivePci" Type="PCSC.SCardPCI" />
        <Parameter Name="receiveBuffer" Type="System.Byte[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="sendPci">Structure of Protocol Control Information.</param>
        <param name="sendBuffer">APDU to send to the card.</param>
        <param name="receivePci">Structure of protocol information.</param>
        <param name="receiveBuffer">Response from the card.</param>
        <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />.</summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description> 	Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>
                <paramref name="sendBuffer" /> or <paramref name="receiveBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>
                <paramref name="sendBuffer" /> or <paramref name="receiveBuffer" /> or <paramref name="sendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidValue" />
              </term>
              <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NotTransacted" />
              </term>
              <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ProtocolMismatch" />
              </term>
              <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ResetCard" />
              </term>
              <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.RemovedCard" />
              </term>
              <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>The card responds from the APDU and stores this response in <paramref name="receiveBuffer" />. <paramref name="sendPci" /> and <paramref name="receivePci" /> are structures containing the following (implemented in <see cref="T:PCSC.SCardPCI" />):
            <example><code lang="C">
            typedef struct {
            	DWORD dwProtocol;    // SCARD_PROTOCOL_T0 or SCARD_PROTOCOL_T1
            	DWORD cbPciLength;   // Length of this structure - not used
            } SCARD_IO_REQUEST;
            </code></example></para>
          <para>It is recommended to use pre-defined / built-in PCI structures by calling one of the following methods:
            <list type="bullet"><item><term><see cref="M:PCSC.ISCardReader.Transmit(System.IntPtr,System.Byte[],PCSC.SCardPCI,System.Byte[]@)" /></term></item><item><term><see cref="M:PCSC.ISCardReader.Transmit(System.IntPtr,System.Byte[],System.Byte[]@)" /></term></item></list></para>
          <para>This method calls the API function SCardTransmit(). The pointers to the pre-defined / built-in PCI structures are determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transmit">
      <MemberSignature Language="C#" Value="public PCSC.SCardError Transmit (byte[] sendBuffer, int sendBufferLength, byte[] receiveBuffer, ref int receiveBufferLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError Transmit(unsigned int8[] sendBuffer, int32 sendBufferLength, unsigned int8[] receiveBuffer, int32 receiveBufferLength) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sendBuffer" Type="System.Byte[]" />
        <Parameter Name="sendBufferLength" Type="System.Int32" />
        <Parameter Name="receiveBuffer" Type="System.Byte[]" />
        <Parameter Name="receiveBufferLength" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="sendBuffer">APDU to send to the card. </param>
        <param name="sendBufferLength">The buffer size of <paramref name="sendBuffer" /> in bytes.</param>
        <param name="receiveBuffer">Response from the card.</param>
        <param name="receiveBufferLength">The buffer size of <paramref name="receiveBuffer" /> in bytes.</param>
        <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description> 	Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>
                <paramref name="sendBuffer" /> or <paramref name="receiveBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>
                <paramref name="sendBuffer" /> or <paramref name="receiveBuffer" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidValue" />
              </term>
              <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NotTransacted" />
              </term>
              <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ProtocolMismatch" />
              </term>
              <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ResetCard" />
              </term>
              <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.RemovedCard" />
              </term>
              <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>The card responds from the APDU and stores this response in <paramref name="receiveBuffer" />.  The buffer <paramref name="receiveBuffer" /> must be initialized. The size of the returned data will be stored in <paramref name="receiveBufferLength" />. This method will return with error code <see cref="F:PCSC.SCardError.InsufficientBuffer" /> if the buffer size of <paramref name="receiveBuffer" /> is too small for the result. If one of the parameters <paramref name="sendBufferLength" /> or <paramref name="receiveBufferLength" /> is invalid, the method will throw an <see cref="T:System.ArgumentOutOfRangeException" />.</para>
          <para>This method calls the API function SCardTransmit().</para>
          <block subset="none" type="note">
            <para>This method will only work if the reader has been connected with one of the following protocols:
            <list type="table"><listheader><term>Protocol</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardProtocol.T0" /></term><description>T=0 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.T1" /></term><description>T=1 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.Raw" /></term><description>Raw active protocol.</description></item></list></para>
          </block>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transmit">
      <MemberSignature Language="C#" Value="public PCSC.SCardError Transmit (IntPtr sendPci, byte[] sendBuffer, PCSC.SCardPCI receivePci, ref byte[] receiveBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError Transmit(native int sendPci, unsigned int8[] sendBuffer, class PCSC.SCardPCI receivePci, unsigned int8[] receiveBuffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sendPci" Type="System.IntPtr" />
        <Parameter Name="sendBuffer" Type="System.Byte[]" />
        <Parameter Name="receivePci" Type="PCSC.SCardPCI" />
        <Parameter Name="receiveBuffer" Type="System.Byte[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="sendPci">A pointer to a pre-defined Structure of Protocol Control Information. You can use one of the following:
            <list type="table"><listheader><term>Protocol Control Information</term><description>Description</description></listheader><item><term><see cref="P:PCSC.SCardPCI.T0" /></term><description>Pre-defined T=0 PCI structure. (SCARD_PCI_T0)</description></item><item><term><see cref="P:PCSC.SCardPCI.T1" /></term><description>Pre-defined T=1 PCI structure. (SCARD_PCI_T1)</description></item><item><term><see cref="P:PCSC.SCardPCI.Raw" /></term><description>Pre-defined RAW PCI structure. (SCARD_PCI_RAW)</description></item></list></param>
        <param name="sendBuffer">APDU to send to the card. </param>
        <param name="receivePci">Structure of protocol information. </param>
        <param name="receiveBuffer">Response from the card. </param>
        <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description> 	Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>
                <paramref name="sendBuffer" /> or <paramref name="receiveBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>
                <paramref name="sendBuffer" /> or <paramref name="receiveBuffer" /> or <paramref name="sendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidValue" />
              </term>
              <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NotTransacted" />
              </term>
              <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ProtocolMismatch" />
              </term>
              <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ResetCard" />
              </term>
              <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.RemovedCard" />
              </term>
              <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>The card responds from the APDU and stores this response in <paramref name="receiveBuffer" />. <paramref name="receivePci" /> is a structure containing the following (implemented in <see cref="T:PCSC.SCardPCI" />):
            <example><code lang="C">
            typedef struct {
            	DWORD dwProtocol;    // SCARD_PROTOCOL_T0 or SCARD_PROTOCOL_T1
            	DWORD cbPciLength;   // Length of this structure - not used
            } SCARD_IO_REQUEST;
            </code></example></para>
          <para>This method calls the API function SCardTransmit(). The pointers to the pre-defined / built-in PCI structures are determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.</para>
          <example>
            <code lang="C#">
            // Create a new PC/SC context.
            var ctx = new SCardContext();
            ctx.Establish(SCardScope.System);
            // Connect to the reader
            var rfidReader = new SCardReader(ctx);
            SCardError rc = rfidReader.Connect(
            	"OMNIKEY CardMan 5x21 00 01",
            	SCardShareMode.Shared,
            	SCardProtocol.T1);
            if (rc != SCardError.Success) {
            	Console.WriteLine("Unable to connect to RFID card / chip. Error: " + SCardHelper.StringifyError(rc));
            	return;
            }
            // prepare APDU
            byte[] ucByteSend = new byte[]
            	{
            		0xFF,   // the instruction class
            		0xCA,   // the instruction code
            		0x00,   // parameter to the instruction
            		0x00,   // parameter to the instruction
            		0x00    // size of I/O transfer
            	};
            rc = rfidReader.BeginTransaction();
            if (rc != SCardError.Success) {
            	throw new Exception("Could not begin transaction.");
            }
            Console.Out.WriteLine("Retrieving the UID .... ");
            SCardPCI ioreq = new SCardPCI();   // IO returned protocol control information.
            byte[] ucByteReceive = new byte[10];
            rc = rfidReader.Transmit(
            	SCardPCI.T1,// Protocol control information, T0, T1 and Raw
            	            // are global defined protocol header structures.
            	ucByteSend, // the actual data to be written to the card
            	ioreq,      // The returned protocol control information
            	ref ucByteReceive);
            if (rc == SCardError.Success) {
            	Console.WriteLine("Uid: {0}", BitConverter.ToString(ucByteReceive));
            } else {
            	Console.WriteLine("Error: " + SCardHelper.StringifyError(rc));
            }
            rfidReader.EndTransaction(SCardReaderDisposition.Leave);
            rfidReader.Disconnect(SCardReaderDisposition.Reset);
            ctx.Release()
            </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transmit">
      <MemberSignature Language="C#" Value="public PCSC.SCardError Transmit (IntPtr sendPci, byte[] sendBuffer, int sendBufferLength, PCSC.SCardPCI receivePci, byte[] receiveBuffer, ref int receiveBufferLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PCSC.SCardError Transmit(native int sendPci, unsigned int8[] sendBuffer, int32 sendBufferLength, class PCSC.SCardPCI receivePci, unsigned int8[] receiveBuffer, int32 receiveBufferLength) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCardError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sendPci" Type="System.IntPtr" />
        <Parameter Name="sendBuffer" Type="System.Byte[]" />
        <Parameter Name="sendBufferLength" Type="System.Int32" />
        <Parameter Name="receivePci" Type="PCSC.SCardPCI" />
        <Parameter Name="receiveBuffer" Type="System.Byte[]" />
        <Parameter Name="receiveBufferLength" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="sendPci">A pointer to a pre-defined Structure of Protocol Control Information. You can use one of the following:
            <list type="table"><listheader><term>Protocol Control Information</term><description>Description</description></listheader><item><term><see cref="P:PCSC.SCardPCI.T0" /></term><description>Pre-defined T=0 PCI structure. (SCARD_PCI_T0)</description></item><item><term><see cref="P:PCSC.SCardPCI.T1" /></term><description>Pre-defined T=1 PCI structure. (SCARD_PCI_T1)</description></item><item><term><see cref="P:PCSC.SCardPCI.Raw" /></term><description>Pre-defined RAW PCI structure. (SCARD_PCI_RAW)</description></item></list></param>
        <param name="sendBuffer">APDU to send to the card. </param>
        <param name="sendBufferLength">The buffer size of <paramref name="sendBuffer" /> in bytes.</param>
        <param name="receivePci">Structure of protocol information. </param>
        <param name="receiveBuffer">Response from the card.</param>
        <param name="receiveBufferLength">The buffer size of <paramref name="receiveBuffer" /> in bytes.</param>
        <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
        <returns>
          <list type="table">
            <listheader>
              <term>Return value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.Success" />
              </term>
              <description> 	Successful (SCARD_S_SUCCESS)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InsufficientBuffer" />
              </term>
              <description>
                <paramref name="sendBuffer" /> or <paramref name="receiveBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidHandle" />
              </term>
              <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidParameter" />
              </term>
              <description>
                <paramref name="sendBuffer" /> or <paramref name="receiveBuffer" /> or <paramref name="sendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.InvalidValue" />
              </term>
              <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NoService" />
              </term>
              <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.NotTransacted" />
              </term>
              <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ProtocolMismatch" />
              </term>
              <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ReaderUnavailable" />
              </term>
              <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.CommunicationError" />
              </term>
              <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.ResetCard" />
              </term>
              <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
            </item>
            <item>
              <term>
                <see cref="F:PCSC.SCardError.RemovedCard" />
              </term>
              <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
            </item>
          </list>
        </returns>
        <remarks>
          <para>The card responds from the APDU and stores this response in <paramref name="receiveBuffer" />. The size of the returned data will be stored in <paramref name="receiveBufferLength" />. This method will return with error code <see cref="F:PCSC.SCardError.InsufficientBuffer" /> if the buffer size of <paramref name="receiveBuffer" /> is too small for the result. If one of the parameters <paramref name="sendBufferLength" /> or <paramref name="receiveBufferLength" /> is invalid, the method will throw an <see cref="T:System.ArgumentOutOfRangeException" />.</para>
          <para>This method calls the API function SCardTransmit(). The pointers to the pre-defined / built-in PCI structures are determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
